#!/bin/bash
set -e

. /usr/share/debconf/confmodule

CONFIGFILE=/etc/backup-manager.conf

if [ -f $CONFIGFILE ]; then
    . $CONFIGFILE || true
    db_set backup-manager/backup-repository "$BM_REPOSITORY_ROOT"
    db_set backup-manager/repo_user "$BM_REPOSITORY_USER"
    db_set backup-manager/repo_group "$BM_REPOSITORY_GROUP"
    db_set backup-manager/filetype  "$BM_TARBALL_FILETYPE"
    db_set backup-manager/dump_symlinks "$BM_TARBALL_DUMPSYMLINKS"
    db_set backup-manager/name-format "$BM_TARBALL_NAMEFORMAT"
    db_set backup-manager/time-to-live "$BM_ARCHIVE_TTL"
    db_set backup-manager/directories "$BM_TARBALL_DIRECTORIES"
    db_set backup-manager/blacklist "$BM_TARBALL_BLACKLIST"
    if [ "$BM_ENCRYPTION_METHOD" == "gpg" ]; then
	db_set backup-manager/enable_encryption "true"
    else
	db_set backup-manager/enable_encryption "false"
    fi
    db_set backup-manager/encryption_recipient "$BM_ENCRYPTION_RECIPIENT"
    db_set backup-manager/transfert_mode "$BM_UPLOAD_METHOD"
    if [ -z "$BM_UPLOAD_METHOD" ]; then
	db_set backup-manager/want_to_upload "false"
    else
	db_set backup-manager/want_to_upload "true"
    fi
    db_set backup-manager/upload-hosts "$BM_UPLOAD_HOSTS"
    db_set backup-manager/upload-user-ftp "$BM_UPLOAD_FTP_USER"
    db_set backup-manager/upload-passwd "$BM_UPLOAD_FTP_PASSWORD"
    db_set backup-manager/upload-user-scp "$BM_UPLOAD_SSH_USER"
    db_set backup-manager/upload-key "$BM_UPLOAD_SSH_KEY"
    db_set backup-manager/upload-dir "$BM_UPLOAD_DESTINATION"
    if [ -z "$BM_BURNING_METHOD" -o "$BM_BURNING_METHOD" == "none" ]; then
	db_set backup-manager/burning-enabled "false"
    else
	db_set backup-manager/burning-enabled "true"
    fi
    db_set backup-manager/burning-method "$BM_BURNING_METHOD"
    db_set backup-manager/burning-device "$BM_BURNING_DEVICE"
    db_set backup-manager/burning-maxsize "$BM_BURNING_MAXSIZE"
fi

# This is the basic question we have to ask : 
# how to make archives, where to store it..

db_input high backup-manager/backup-repository || true
db_input high backup-manager/repo_user || true
db_input high backup-manager/repo_group || true

db_input low backup-manager/filetype || true

# We have to manage deprecated /etc/cron.d/backup-manager
# Ask if user wants to remove the file
if [ -f /etc/cron.d/backup-manager ]; then
	db_input high backup-manager/cron_d_remove_deprecated || true
fi
	
# Look where their cronscript is.
if [ -f /etc/cron.daily/backup-manager ]; then
    db_set backup-manager/cron_frequency "daily"
elif [ -f /etc/cron.weekly/backup-manager ]; then
    db_set backup-manager/cron_frequency "weekly"
elif [ -f /etc/cron.monthly/backup-manager ]; then
    db_set backup-manager/cron_frequency "monthly"
else
    # They don't have one. If we're upgrading, this means they don't
    # want it.
    if [ -n "$2" ]; then
	db_set backup-manager/cron_frequency "none"
    fi
fi

db_input medium backup-manager/cron_frequency || true

db_go || true

# only the tar command can dereference symlinks.
if [ "$RET" != "zip" ]; then
	db_input low backup-manager/dump_symlinks || true
fi

db_input low backup-manager/name-format || true
db_input medium backup-manager/time-to-live || true
db_input high backup-manager/directories || true
db_input medium backup-manager/blacklist || true
db_go || true

# Encryption?
db_input medium backup-manager/enable_encryption || true
db_go || true

db_get backup-manager/enable_encryption || true
if [ $RET = true ]; then
    db_input medium backup-manager/encryption_recipient || true
    db_go || true
fi    

# Now, we have the extra-features:
# uploading system
db_input low backup-manager/want_to_upload || true
db_go || true

db_get backup-manager/want_to_upload 
if [ $RET = true ]; then

	db_input low backup-manager/transfert_mode || true
	db_go || true
	
	db_input low backup-manager/upload-hosts || true
	
	db_get backup-manager/transfert_mode || true
	if [ $RET = ftp ]; then
		db_input low backup-manager/upload-user-ftp || true
		db_input low backup-manager/upload-passwd || true
	else
		db_input low backup-manager/upload-user-scp || true
		db_go || true

		db_get backup-manager/upload-user-scp || true
		scp_user="$RET"
		
        db_input low backup-manager/upload-key || true
	fi
	
	db_input low backup-manager/upload-dir || true
fi
db_go || true


# burning system ?
db_input low backup-manager/burning-enabled || true
db_go || true

db_get backup-manager/burning-enabled || true
if [ "$RET" = "true" ]; then
	db_input low backup-manager/burning-device || true
	db_input low backup-manager/burning-method || true
	db_input low backup-manager/burning-maxsize || true
fi
db_go || true

