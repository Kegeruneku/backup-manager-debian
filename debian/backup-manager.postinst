#! /bin/sh
# postinst script for backup-manager
#
# see: dh_installdeb(1)

set -e

. /usr/share/debconf/confmodule

tplconffile="/usr/share/backup-manager/backup-manager.conf.tpl"
cronfile_tpl="$tplconffile"
conffile="/etc/backup-manager.conf"
cronfile="/etc/cron.daily/backup-manager"

# This is a safe way to replace a file with ucf
replace_file()
{
	file_source="$1"
	file_dest="$2"

	if [ -f $file_source ]; then
		if [ ! -f $file_dest ]; then
			mv $file_source $file_dest || exit 10
		else
			cp $file_dest ${file_dest}.old
			ucf --debconf-ok --three-way $file_source $file_dest || exit 11
		fi
	fi
}

# This will substitute everything in the conf file
confsed() 
{
	sed -r \
	 -e 's|BM_REPOSITORY_ROOT=".*"|'"BM_REPOSITORY_ROOT=\"$repository\""'|g' \
	 -e 's|BM_REPOSITORY_USER=".*"|'"BM_REPOSITORY_USER=\"$repo_user\""'|g' \
	 -e 's|BM_REPOSITORY_GROUP=".*"|'"BM_REPOSITORY_GROUP=\"$repo_group\""'|g' \
	 -e 's/BM_ARCHIVE_TTL=".*"/'"BM_ARCHIVE_TTL=\"$timetolive\""'/g' \
	 -e 's/BM_TARBALL_NAMEFORMAT=".*"/'"BM_TARBALL_NAMEFORMAT=\"$nameformat\""'/g' \
	 -e 's/BM_TARBALL_FILETYPE=".*"/'"BM_TARBALL_FILETYPE=\"$filetype\""'/g' \
	 -e 's|BM_TARBALL_DUMPSYMLINKS=".*"|BM_TARBALL_DUMPSYMLINKS="'"$dumpsymlinks"'"|g' \
	 -e 's|BM_TARBALL_BLACKLIST=".*"|BM_TARBALL_BLACKLIST="'"$blacklist"'"|g' \
	 -e 's|BM_TARBALL_DIRECTORIES=".*"|'"BM_TARBALL_DIRECTORIES=\"$directories\""'|g' \
	 -e 's/BM_UPLOAD_METHOD=".*"/BM_UPLOAD_METHOD="'"$transfert_mode"'"/g' \
	 -e 's/BM_UPLOAD_HOSTS=".*"/BM_UPLOAD_HOSTS="'"$hosts"'"/g' \
	 -e 's|BM_UPLOAD_DESTINATION=".*"|BM_UPLOAD_DESTINATION="'"$dir"'"|g' \
	 -e 's/BM_UPLOAD_FTP_USER=".*"/BM_UPLOAD_FTP_USER="'"$ftp_user"'"/g' \
	 -e 's/BM_UPLOAD_FTP_PASSWORD=".*"/BM_UPLOAD_FTP_PASSWORD="'"$ftp_passwd"'"/g' \
	 -e 's/BM_UPLOAD_SSH_USER=".*"/BM_UPLOAD_SSH_USER="'"$ssh_user"'"/g' \
	 -e 's|BM_UPLOAD_SSH_KEY=".*"|BM_UPLOAD_SSH_KEY="'"$keyfile"'"|g' \
	 -e 's|BM_BURNING_MEDIA=".*"|'"BM_BURNING_MEDIA=\"$burning_media\""'|g' \
	 -e 's|BM_BURNING_DEVICE=".*"|'"BM_BURNING_DEVICE=\"$burning_device\""'|g' \
	 -e 's|BM_ENCRYPTION_METHOD=".*"|'"BM_ENCRYPTION_METHOD=\"$encryption\""'|g' \
	 -e 's|BM_ENCRYPTION_RECIPIENT=".*"|'"BM_ENCRYPTION_RECIPIENT=\"$gpg_recipient\""'|g' \
	 -e 's|BM_BURNING_METHOD=".*"|'"BM_BURNING_METHOD=\"$burning_method\""'|g' \
	 -e 's|BM_BURNING_MAXSIZE=".*"|'"BM_BURNING_MAXSIZE=\"$burning_maxsize\""'|g'
}

# Set the value of variable $2 (or RET if $2 is missing)
# to the value of debconf key $1.
# Note that on read errors we abort to avoid setting a bogus value.
 
db_readkey()
{
    db_get $1
    [ "X$2" = "X" ] || eval $2="\"\$RET\""
}

action="$1"
version="$2"

# NOTE: unset shell variables when referenced result in empty string; thus
# we only need to read-in from debconf those that we will set in the conf
# file and not initialise the rest.

case "$action" in

    configure|reconfigure)      # see debconf-devel(7) for reconfigure

	# we have to purge the deprecated /etc/cron.d/backup-manager file
	# Since 0.5.8-3, /etc/cron.d/backup-manager is considered deprecated 
	# because it's not handled by anacron, whereas cron.daily is. 
	if [ -e /etc/cron.d/backup-manager ]; then
		db_get backup-manager/cron_d_remove_deprecated || true
		if [ "$RET" = "true" ]; then
			rm -f /etc/cron.d/backup-manager
		fi
	fi   

	# The repository stuff
        db_readkey backup-manager/backup-repository repository
        db_readkey backup-manager/repo_user         repo_user
        db_readkey backup-manager/repo_group        repo_group

	# first get in debconf which frequency to have
        db_readkey backup-manager/cron_frequency    frequency

        # find the current cron file
        for freq in daily weekly monthly; do
            if [ -f /etc/cron.$freq/backup-manager ]; then
                cronfile="/etc/cron.$freq/backup-manager"
            fi
        done

        # if we find a cronfile, use it instead of the template
        if [ -f $cronfile ]; then
                cronfile_tpl="$cronfile"
        fi

        # use our template file if we don't find a cronfile
        if [ ! -f $cronfile_tpl ]; then
		echo "No template found for the cronfile! ($cronfile_tpl)" >&2
		exit 5
        fi
	
	# According to the frequency we have, move the $cronfile found in the 
        # good CRON sub-directory, or copy our template if none found.
        case $frequency in
            daily|weekly|monthly)
                destfile=/etc/cron.$frequency/backup-manager
                if [ ! -f $destfile ]; then
                    if [ "$cronfile" = "$cronfile_tpl" ]; then
                        mv $cronfile $destfile
                    else 
                        cp $cronfile_tpl $destfile
                        chmod 755 $destfile
                    fi
                fi
            ;;
            never)
                [ -f $cronfile ] && rm -f $cronfile
            ;;
        esac

        db_readkey backup-manager/filetype      filetype
        db_readkey backup-manager/dump_symlinks dumpsymlinks
        db_readkey backup-manager/blacklist     blacklist
        db_readkey backup-manager/name-format   nameformat
        db_readkey backup-manager/time-to-live  timetolive
        db_readkey backup-manager/directories   directories

    # ecnryption

        db_readkey backup-manager/enable_encryption encryption
        if [ "$encryption" = "true" ]; then
            encryption="gpg"
            db_readkey backup-manager/encryption_recipient gpg_recipient
        fi

	# manage the burning option

        db_readkey backup-manager/burning-enabled       burning
        if [ "$burning" = "true" ]; then
            burning_media="cdrom"
            db_readkey backup-manager/burning-device    burning_device
            db_readkey backup-manager/burning-maxsize   burning_maxsize
            db_readkey backup-manager/burning-method    burning_method
        fi

	# manage the uploading system

        db_readkey backup-manager/want_to_upload
        if [ "$RET" = "true" ]; then
            db_readkey backup-manager/upload-hosts      hosts
            db_readkey backup-manager/upload-dir        dir
            db_readkey backup-manager/transfert_mode    transfert_mode
            if [ "$transfert_mode" = "ftp" ]; then
                db_readkey backup-manager/upload-passwd     ftp_passwd
                db_readkey backup-manager/upload-user-ftp   ftp_user
            elif [ "$transfert_mode" = "scp" ]; then
                db_readkey backup-manager/upload-key        keyfile
                db_readkey backup-manager/upload-user-scp   ssh_user
            fi
        fi

	# register our conffile in ucf
	ucfr backup-manager $conffile

	# now filling the conffile with the good values
	tmpconf=$(mktemp)
	confsed < $tplconffile > $tmpconf
	replace_file $tmpconf $conffile || exit 8
	rm -f $tmpconf

	# fix modes on conf files.
	chmod 600 $conffile
	
	db_stop
    ;;

    abort-upgrade|abort-remove|abort-deconfigure)

    ;;

    *)
        echo "postinst called with unknown argument \`$1'" >&2
        exit 0
    ;;
esac

# dh_installdeb will replace this with shell code automatically
# generated by other debhelper scripts.

#DEBHELPER#

exit 0
